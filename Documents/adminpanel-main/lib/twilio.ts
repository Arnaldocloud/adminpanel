import twilio from "twilio"

// Configuraci√≥n de Twilio
const accountSid = process.env.TWILIO_ACCOUNT_SID
const authToken = process.env.TWILIO_AUTH_TOKEN
const whatsappNumber = process.env.TWILIO_WHATSAPP_NUMBER || "whatsapp:+14155238886"

console.log("üîß Inicializando Twilio...")
console.log("- Account SID:", accountSid ? `${accountSid.substring(0, 10)}...` : "‚ùå NO DEFINIDA")
console.log("- Auth Token:", authToken ? "‚úÖ DEFINIDA" : "‚ùå NO DEFINIDA")
console.log("- WhatsApp Number:", whatsappNumber)

// Inicializar cliente de Twilio
let client: any = null

try {
  if (accountSid && authToken) {
    client = twilio(accountSid, authToken)
    console.log("‚úÖ Cliente de Twilio inicializado correctamente")
  } else {
    console.error("‚ùå No se puede inicializar Twilio: faltan credenciales")
  }
} catch (error) {
  console.error("üí• Error al inicializar cliente de Twilio:", error)
}

export interface WhatsAppMessage {
  to: string
  message: string
  mediaUrl?: string
}

// Funci√≥n para enviar mensaje de WhatsApp
export async function sendWhatsAppMessage({ to, message, mediaUrl }: WhatsAppMessage) {
  try {
    console.log("üì± Preparando env√≠o de WhatsApp...")

    if (!client) {
      console.error("‚ùå Cliente de Twilio no inicializado")
      return {
        success: false,
        error: "Twilio client not initialized. Check your credentials.",
      }
    }

    // Formatear n√∫mero de tel√©fono para WhatsApp
    const formattedNumber = formatPhoneNumber(to)
    console.log("üìû N√∫mero original:", to)
    console.log("üìû N√∫mero formateado:", formattedNumber)

    const messageOptions: any = {
      from: whatsappNumber,
      to: `whatsapp:${formattedNumber}`,
      body: message,
    }

    // Agregar media si se proporciona
    if (mediaUrl) {
      messageOptions.mediaUrl = [mediaUrl]
    }

    console.log("üì§ Opciones del mensaje:", {
      from: messageOptions.from,
      to: messageOptions.to,
      bodyLength: message.length,
      hasMedia: !!mediaUrl,
    })

    const result = await client.messages.create(messageOptions)

    console.log("‚úÖ WhatsApp message sent successfully:", result.sid)
    console.log("üìä Message status:", result.status)

    return { success: true, messageId: result.sid, status: result.status }
  } catch (error: any) {
    console.error("üí• Error sending WhatsApp message:", error)
    console.error("Error code:", error.code)
    console.error("Error message:", error.message)
    console.error("Error details:", error.moreInfo)

    // Proporcionar errores m√°s espec√≠ficos
    let userFriendlyError = error.message

    if (error.code === 21211) {
      userFriendlyError = "N√∫mero de tel√©fono inv√°lido. Verifica el formato."
    } else if (error.code === 21408) {
      userFriendlyError = "No tienes permisos para enviar a este n√∫mero. Agrega el n√∫mero a tu Sandbox de Twilio."
    } else if (error.code === 21614) {
      userFriendlyError = "El n√∫mero no puede recibir mensajes de WhatsApp."
    } else if (error.code === 20003) {
      userFriendlyError = "Credenciales de Twilio inv√°lidas."
    }

    return {
      success: false,
      error: userFriendlyError,
      code: error.code,
      details: error.moreInfo,
    }
  }
}

// Formatear n√∫mero de tel√©fono venezolano
function formatPhoneNumber(phone: string): string {
  console.log("üîÑ Formateando n√∫mero:", phone)

  // Remover espacios, guiones y par√©ntesis
  let cleaned = phone.replace(/[\s\-()]/g, "")
  console.log("üßπ N√∫mero limpio:", cleaned)

  // Si empieza con 0, reemplazar por +58
  if (cleaned.startsWith("0")) {
    cleaned = "+58" + cleaned.substring(1)
    console.log("üáªüá™ Agregado c√≥digo Venezuela:", cleaned)
  }

  // Si no tiene c√≥digo de pa√≠s, agregar +58
  if (!cleaned.startsWith("+")) {
    cleaned = "+58" + cleaned
    console.log("üåç Agregado c√≥digo de pa√≠s:", cleaned)
  }

  console.log("‚úÖ N√∫mero final:", cleaned)
  return cleaned
}

// Plantillas de mensajes
export const messageTemplates = {
  orderReceived: (playerName: string, orderId: string, amount: number, cartCount: number) =>
    `
üéØ *¬°Hola ${playerName}!*

‚úÖ Hemos recibido tu orden de compra de cartones de bingo.

üìã *Detalles de tu orden:*
‚Ä¢ ID: #${orderId.slice(-8)}
‚Ä¢ Cartones: ${cartCount}
‚Ä¢ Total: $${amount} USD

‚è≥ Tu pago est√° siendo verificado por nuestro equipo. Te notificaremos cuando est√© listo.

¬°Gracias por participar en nuestro bingo! üéâ
  `.trim(),

  paymentVerified: (playerName: string, orderId: string, cartCount: number) =>
    `
üéâ *¬°Excelente ${playerName}!*

‚úÖ Tu pago ha sido verificado exitosamente.

üéØ *Ya puedes participar en el bingo:*
‚Ä¢ Orden: #${orderId.slice(-8)}
‚Ä¢ Cartones: ${cartCount}
‚Ä¢ Estado: ‚úÖ VERIFICADO

üéÆ Mantente atento a los n√∫meros que se van cantando. ¬°Buena suerte!

¬°Que ganes! üèÜ
  `.trim(),

  paymentRejected: (playerName: string, orderId: string, reason?: string) =>
    `
‚ùå *Hola ${playerName}*

Lo sentimos, pero tu pago no pudo ser verificado.

üìã *Detalles:*
‚Ä¢ Orden: #${orderId.slice(-8)}
‚Ä¢ Estado: ‚ùå RECHAZADO
${reason ? `‚Ä¢ Motivo: ${reason}` : ""}

üí¨ Por favor contacta a nuestro soporte para resolver este inconveniente.

Estamos aqu√≠ para ayudarte ü§ù
  `.trim(),

  gameStarted: (playerName: string) =>
    `
üöÄ *¬°${playerName}, el juego ha comenzado!*

üéØ Ya estamos cantando n√∫meros. Revisa tus cartones y marca los n√∫meros que coincidan.

üì± Mantente atento a las actualizaciones del juego.

¬°Que tengas suerte! üçÄ
  `.trim(),

  numberCalled: (number: number, totalCalled: number) =>
    `
üì¢ *N√öMERO CANTADO: ${number}*

üéØ N√∫meros cantados hasta ahora: ${totalCalled}/75

¬°Revisa tus cartones! üéÆ
  `.trim(),

  bingoWinner: (playerName: string, cardId: string) =>
    `
üèÜ *¬°¬°¬°FELICITACIONES ${playerName.toUpperCase()}!!!*

üéâ ¬°HAS GANADO EL BINGO! üéâ

üéØ *Detalles del premio:*
‚Ä¢ Cart√≥n ganador: ${cardId}
‚Ä¢ ¬°Eres el ganador oficial!

üéä Contacta a los organizadores para reclamar tu premio.

¬°INCRE√çBLE! üåü
  `.trim(),

  gameReset: () =>
    `
üîÑ *NUEVO JUEGO INICIANDO*

üéØ Se ha reiniciado el juego de bingo. 

üìã Prep√°rate para la pr√≥xima ronda.

¬°Buena suerte a todos! üçÄ
  `.trim(),
}

// Funci√≥n para enviar notificaci√≥n de orden recibida
export async function notifyOrderReceived(
  playerName: string,
  playerPhone: string,
  orderId: string,
  amount: number,
  cartCount: number,
) {
  const message = messageTemplates.orderReceived(playerName, orderId, amount, cartCount)
  return await sendWhatsAppMessage({
    to: playerPhone,
    message,
  })
}

// Funci√≥n para enviar notificaci√≥n de pago verificado
export async function notifyPaymentVerified(
  playerName: string,
  playerPhone: string,
  orderId: string,
  cartCount: number,
) {
  const message = messageTemplates.paymentVerified(playerName, orderId, cartCount)
  return await sendWhatsAppMessage({
    to: playerPhone,
    message,
  })
}

// Funci√≥n para enviar notificaci√≥n de pago rechazado
export async function notifyPaymentRejected(playerName: string, playerPhone: string, orderId: string, reason?: string) {
  const message = messageTemplates.paymentRejected(playerName, orderId, reason)
  return await sendWhatsAppMessage({
    to: playerPhone,
    message,
  })
}

// Funci√≥n para notificar inicio de juego
export async function notifyGameStarted(players: Array<{ name: string; phone: string }>) {
  const promises = players.map((player) =>
    sendWhatsAppMessage({
      to: player.phone,
      message: messageTemplates.gameStarted(player.name),
    }),
  )

  return await Promise.allSettled(promises)
}

// Funci√≥n para notificar n√∫mero cantado (solo a jugadores activos)
export async function notifyNumberCalled(players: Array<{ phone: string }>, number: number, totalCalled: number) {
  // Enviar cada 3 n√∫meros para no saturar pero mantener informados
  if (totalCalled % 3 !== 0 && totalCalled !== 1) return

  const message = messageTemplates.numberCalled(number, totalCalled)
  const promises = players.map((player) =>
    sendWhatsAppMessage({
      to: player.phone,
      message,
    }),
  )

  return await Promise.allSettled(promises)
}

// Funci√≥n para notificar ganador
export async function notifyBingoWinner(playerName: string, playerPhone: string, cardId: string) {
  const message = messageTemplates.bingoWinner(playerName, cardId)
  return await sendWhatsAppMessage({
    to: playerPhone,
    message,
  })
}

// Funci√≥n para notificar reinicio de juego
export async function notifyGameReset(players: Array<{ phone: string }>) {
  const message = messageTemplates.gameReset()
  const promises = players.map((player) =>
    sendWhatsAppMessage({
      to: player.phone,
      message,
    }),
  )

  return await Promise.allSettled(promises)
}
